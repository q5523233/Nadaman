package com.sm.nadaman.common.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sm.nadaman.common.bean.Ecg12Data;

import com.sm.nadaman.common.bean.Health;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEALTH".
*/
public class HealthDao extends AbstractDao<Health, Long> {

    public static final String TABLENAME = "HEALTH";

    /**
     * Properties of entity Health.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property AveHeartRate = new Property(1, int.class, "aveHeartRate", false, "AVE_HEART_RATE");
        public final static Property MinHeartRate = new Property(2, int.class, "minHeartRate", false, "MIN_HEART_RATE");
        public final static Property MaxHeartRate = new Property(3, int.class, "maxHeartRate", false, "MAX_HEART_RATE");
        public final static Property HeartStrException = new Property(4, String.class, "heartStrException", false, "HEART_STR_EXCEPTION");
        public final static Property ExceptionLevel = new Property(5, int.class, "exceptionLevel", false, "EXCEPTION_LEVEL");
        public final static Property MeasureDuration = new Property(6, int.class, "measureDuration", false, "MEASURE_DURATION");
        public final static Property MPoint = new Property(7, String.class, "mPoint", false, "M_POINT");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
    }

    private DaoSession daoSession;


    public HealthDao(DaoConfig config) {
        super(config);
    }
    
    public HealthDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEALTH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"AVE_HEART_RATE\" INTEGER NOT NULL ," + // 1: aveHeartRate
                "\"MIN_HEART_RATE\" INTEGER NOT NULL ," + // 2: minHeartRate
                "\"MAX_HEART_RATE\" INTEGER NOT NULL ," + // 3: maxHeartRate
                "\"HEART_STR_EXCEPTION\" TEXT," + // 4: heartStrException
                "\"EXCEPTION_LEVEL\" INTEGER NOT NULL ," + // 5: exceptionLevel
                "\"MEASURE_DURATION\" INTEGER NOT NULL ," + // 6: measureDuration
                "\"M_POINT\" TEXT," + // 7: mPoint
                "\"DATE\" TEXT," + // 8: date
                "\"TYPE\" INTEGER NOT NULL );"); // 9: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEALTH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Health entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getAveHeartRate());
        stmt.bindLong(3, entity.getMinHeartRate());
        stmt.bindLong(4, entity.getMaxHeartRate());
 
        String heartStrException = entity.getHeartStrException();
        if (heartStrException != null) {
            stmt.bindString(5, heartStrException);
        }
        stmt.bindLong(6, entity.getExceptionLevel());
        stmt.bindLong(7, entity.getMeasureDuration());
 
        String mPoint = entity.getMPoint();
        if (mPoint != null) {
            stmt.bindString(8, mPoint);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Health entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getAveHeartRate());
        stmt.bindLong(3, entity.getMinHeartRate());
        stmt.bindLong(4, entity.getMaxHeartRate());
 
        String heartStrException = entity.getHeartStrException();
        if (heartStrException != null) {
            stmt.bindString(5, heartStrException);
        }
        stmt.bindLong(6, entity.getExceptionLevel());
        stmt.bindLong(7, entity.getMeasureDuration());
 
        String mPoint = entity.getMPoint();
        if (mPoint != null) {
            stmt.bindString(8, mPoint);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void attachEntity(Health entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Health readEntity(Cursor cursor, int offset) {
        Health entity = new Health( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // aveHeartRate
            cursor.getInt(offset + 2), // minHeartRate
            cursor.getInt(offset + 3), // maxHeartRate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // heartStrException
            cursor.getInt(offset + 5), // exceptionLevel
            cursor.getInt(offset + 6), // measureDuration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mPoint
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // date
            cursor.getInt(offset + 9) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Health entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAveHeartRate(cursor.getInt(offset + 1));
        entity.setMinHeartRate(cursor.getInt(offset + 2));
        entity.setMaxHeartRate(cursor.getInt(offset + 3));
        entity.setHeartStrException(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExceptionLevel(cursor.getInt(offset + 5));
        entity.setMeasureDuration(cursor.getInt(offset + 6));
        entity.setMPoint(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Health entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Health entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Health entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEcg12DataDao().getAllColumns());
            builder.append(" FROM HEALTH T");
            builder.append(" LEFT JOIN ECG12_DATA T0 ON T.\"_id\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Health loadCurrentDeep(Cursor cursor, boolean lock) {
        Health entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Ecg12Data ecg12Data = loadCurrentOther(daoSession.getEcg12DataDao(), cursor, offset);
        entity.setEcg12Data(ecg12Data);

        return entity;    
    }

    public Health loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Health> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Health> list = new ArrayList<Health>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Health> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Health> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
